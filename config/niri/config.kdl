input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
        }

        // You can set the keyboard repeat parameters. The defaults match wlroots and sway.
        // Delay is in milliseconds before the repeat starts. Rate is in characters per second.
        // repeat-delay 600
        // repeat-rate 25

        // Niri can remember the keyboard layout globally (the default) or per-window.
        // - "global" - layout change is global for all windows.
        // - "window" - layout is tracked for each window individually.
        // track-layout "global"

        numlock
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        tap
        // dwt
        // dwtp
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // tap-button-map "left-middle-right"
    }

    mouse {
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
    }

    trackpoint {
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
    }

    tablet {
        // Set the name of the output (see below) which the tablet will map to.
        // If this is unset or the output doesn't exist, the tablet maps to one of the
        // existing outputs.
        map-to-output "eDP-1"
    }

    touch {
        // Set the name of the output (see below) which touch input will map to.
        // If this is unset or the output doesn't exist, touch input maps to one of the
        // existing outputs.
        map-to-output "eDP-1"
    }

    // By default, niri will take over the power button to make it sleep
    // instead of power off.
    // Uncomment this if you would like to configure the power button elsewhere
    // (i.e. logind.conf).
    // disable-power-key-handling
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Remember to uncomment the node by removing "/-"!
/-output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Scale is a floating-point number, but at the moment only integer values work.
    scale 2.0

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "1920x1080@144"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // It the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=1280 y=0
}

layout {

    // 间隙
    gaps 12

    center-focused-column "never"
    // 只有一个列居中
    always-center-single-column

    // empty-workspace-above-first

    // eg：normal、tabbed
    default-column-display "normal"
    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    default-column-width {
        proportion 0.66667;
    }

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.

    // You can change how the focus ring looks.
    focus-ring {
        off
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        // off

        width 2
        active-color "#42A5F5"
        inactive-color "#505050"
        urgent-color "#9b0000"
    }

    shadow {
        // on
    }

    tab-indicator {
        gap 3
        width 3
        length total-proportion=0.7
        gaps-between-tabs 0
        corner-radius 2
    }

    insert-hint {
        // off
        color "#ffc87f80"
        gradient from="#ffbb6680" to="#ffc88080" angle=45 relative-to="workspace-view"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// spawn-at-startup "alacritty" "-e" "fish"
//spawn-at-startup "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1"
//spawn-at-startup "udiskie"
spawn-at-startup "waybar"
spawn-at-startup "flameshot"
spawn-at-startup "fcitx5"
spawn-at-startup "nm-applet"
spawn-at-startup "blueman-applet"
spawn-at-startup "swww-daemon"
spawn-sh-at-startup "sh ~/.config/niri/swww_randomize.sh ~/job/wallpaper"
spawn-at-startup "swww-daemon" "-n" "overview"
spawn-sh-at-startup "sh ~/.config/niri/swww_overview.sh ~/job/wallpaper"


prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
// screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
screenshot-path null

// 环境变量
environment {
    // Set a variable like this:
    QT_QPA_PLATFORM "wayland"

    // electron wayland su
    ELECTRON_OZONE_PLATFORM_HINT "auto"

    // 系统语言配置
    LANG "zh_CN.UTF-8"
    LANGUAGE "zh_CN:en_US"

    // fcitx5 配置
    QT_IM_MODULE "fcitx"
    SDL_IM_MODULE "fcitx"
    XMODIFIERS "@im=fcitx"
    GLFW_IM_MODULE "ibus"

    // Remove a variable by using null as the value:
    // DISPLAY null
}

// 光标
cursor {
    // Change the theme and size of the cursor as well as set the
    // `XCURSOR_THEME` and `XCURSOR_SIZE` env variables.
    // xcursor-theme "default"
    // xcursor-size 24
    // hide-when-typing
    // Hide the cursor after one second of inactivity.
    // hide-after-inactive-ms 1000
}

overview {
    zoom 0.6
    workspace-shadow {
        off
    }
}

// Settings for the "Important Hotkeys" overlay.
hotkey-overlay {
    // Uncomment this line if you don't want to see the hotkey help at niri startup.
    skip-at-startup
}

binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+Return { spawn "foot"; }
    Mod+P { spawn "fuzzel"; }
    Mod+N { spawn "swaylock"; }
    // 切换 overview
    Mod+Tab { toggle-overview; }

    // You can also use a shell:
    // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    XF86AudioMute allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioRaiseVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1+ && wp-vol"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1- && wp-vol"; }

    // 切换浮动
    Mod+V { toggle-window-floating; }

    // 列（column）和tab之间切换
    Mod+W { toggle-column-tabbed-display; }
    // 关闭窗口
    Mod+C { close-window; }

    // 聚焦到左边列（column）
    Mod+Left  { focus-column-left; }
    // 聚焦到右边列（column）
    Mod+Right { focus-column-right; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }

    // 聚焦到左边列（column）
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    // 聚焦到右边列（column）
    Mod+L     { focus-column-right; }


    // 移动列（column）到左边
    Mod+Ctrl+Left  { move-column-left; }
    // 移动列（column）到右边
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }

    // 移动列（column）到左边
    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+J     { move-window-down; }
    Mod+Ctrl+K     { move-window-up; }
    // 移动列（column）到右边
    Mod+Ctrl+L     { move-column-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }
    Mod+Shift+H     { focus-monitor-left; }
    Mod+Shift+J     { focus-monitor-down; }
    Mod+Shift+K     { focus-monitor-up; }
    Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    // 聚焦到下一个工作区
    Mod+U              { focus-workspace-down; }
    // 聚焦到下一个工具区
    Mod+I              { focus-workspace-up; }

    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    // 移动列到下一个工作区
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    // 移动列到上一个工作区
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    // Alternatively, there are commands to move just a single window:
    // 移动窗口到下一个工作区
    Mod+Shift+U { move-window-to-workspace-down; }
    // 移动窗口到上一个工作区
    Mod+Shift+I { move-window-to-workspace-up; }

    Mod+Alt+Page_Down { move-workspace-down; }
    Mod+Alt+Page_Up   { move-workspace-up; }
    Mod+Alt+U         { move-workspace-down; }
    Mod+Alt+I         { move-workspace-up; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }
    Mod+Shift+1 { move-window-to-workspace 1; }
    Mod+Shift+2 { move-window-to-workspace 2; }
    Mod+Shift+3 { move-window-to-workspace 3; }
    Mod+Shift+4 { move-window-to-workspace 4; }
    Mod+Shift+5 { move-window-to-workspace 5; }
    Mod+Shift+6 { move-window-to-workspace 6; }
    Mod+Shift+7 { move-window-to-workspace 7; }
    Mod+Shift+8 { move-window-to-workspace 8; }
    Mod+Shift+9 { move-window-to-workspace 9; }

    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }

    // There are also commands that consume or expel a single window to the side.
    // Mod+BracketLeft  { consume-or-expel-window-left; }
    // Mod+BracketRight { consume-or-expel-window-right; }

    Mod+R { switch-preset-column-width; }
    // 最大化列
    Mod+F { maximize-column; }
    // 全屏窗口
    Mod+Shift+F { fullscreen-window; }
    // 居中列
    Mod+T { center-column; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    // 列（column）减少 10%
    Mod+Minus { set-column-width "-10%"; }
    // 列（column）增加 10%
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    // 窗口高度减少 10%
    Mod+Shift+Minus { set-window-height "-10%"; }
    // 窗口高度增加 10%
    Mod+Shift+Equal { set-window-height "+10%"; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot show-pointer=false; }
    Ctrl+Print { screenshot-screen show-pointer=false; }
    Alt+Print { screenshot-window; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    // If you want to skip the confirmation dialog, set the flag like so:
    // 退出并跳过确认
    Mod+Shift+Q { quit skip-confirmation=true; }
    // 关闭屏幕
    Mod+Shift+P { power-off-monitors; }

    // This debug bind will tint all surfaces green, unless they are being
    // directly scanned out. It's therefore useful to check if direct scanout
    // is working.
    // Mod+Shift+Ctrl+T { toggle-debug-tint; }
}

// 窗口规则
window-rule {
    geometry-corner-radius 2
    clip-to-geometry true
    opacity 0.97
}

window-rule {
    match title="图片查看器"
    default-column-width { fixed 971; }
    default-window-height { fixed 860; }
}

// layer 规则
layer-rule {
    match namespace="waybar"
    match at-startup=true

    // Properties that apply continuously.
    opacity 0.5
    block-out-from "screencast"
    // block-out-from "screen-capture"
}

layer-rule {
    match namespace="swww-daemonoverview"
    place-within-backdrop true
}

layer-rule {
    match namespace="eww-bar"
    match at-startup=true
    opacity 0.85
    block-out-from "screencast"
}

// 动画
animations {
    // Uncomment to turn off all animations.
    // You can also put "off" into each individual animation to disable it.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0

    // Individual animations.

    workspace-switch {
        spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
    }

    window-open {
        duration-ms 150
        curve "ease-out-expo"
    }

    window-close {
        duration-ms 150
        curve "ease-out-quad"
    }

    horizontal-view-movement {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

    window-movement {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

    window-resize {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

    config-notification-open-close {
        spring damping-ratio=0.6 stiffness=1000 epsilon=0.001
    }

    screenshot-ui-open {
        duration-ms 200
        curve "ease-out-quad"
    }

    overview-open-close {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

}

gestures {
    hot-corners {
        off
    }
}

// 调试
debug {
    // Make niri take over its DBus services even if it's not running as a session.
    // Useful for testing screen recording changes without having to relogin.
    // The main niri instance will *not* currently take back the services; so you will
    // need to relogin in the end.
    // dbus-interfaces-in-non-session-instances

    // Wait until every frame is done rendering before handing it over to DRM.
    // wait-for-frame-completion-before-queueing

    // Enable direct scanout into overlay planes.
    // May cause frame drops during some animations on some hardware.
    // enable-overlay-planes

    // Disable the use of the cursor plane.
    // The cursor will be rendered together with the rest of the frame.
    // disable-cursor-plane

    // Override the DRM device that niri will use for all rendering.
    // render-drm-device "/dev/dri/renderD129"

    // Enable the color-transformations capability of the Smithay renderer.
    // May cause a slight decrease in rendering performance.
    // enable-color-transformations-capability

    // Emulate zero (unknown) presentation time returned from DRM.
    // This is a thing on NVIDIA proprietary drivers, so this flag can be
    // used to test that we don't break too hard on those systems.
    // emulate-zero-presentation-time
}
